name: Rust Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src-tauri/**'
      - '.github/workflows/rust-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src-tauri/**'
      - '.github/workflows/rust-tests.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Rust Backend
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src-tauri/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS dependencies are usually available by default
        echo "macOS dependencies check complete"

    - name: Check Rust formatting
      working-directory: src-tauri
      run: cargo fmt -- --check

    - name: Run Clippy
      working-directory: src-tauri
      run: cargo clippy -- -D warnings

    - name: Build project
      working-directory: src-tauri
      run: cargo build --verbose

    - name: Run unit tests
      working-directory: src-tauri
      run: cargo test tests:: --verbose

    - name: Run database tests
      working-directory: src-tauri
      run: cargo test database_tests:: --verbose

    - name: Run focus mode tests
      working-directory: src-tauri
      run: cargo test focus_mode_tests:: --verbose

    - name: Run tracker tests
      working-directory: src-tauri
      run: cargo test tracker_tests:: --verbose

    - name: Run integration tests
      working-directory: src-tauri
      run: cargo test integration_tests:: --verbose

    - name: Install cargo-tarpaulin (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: cargo install cargo-tarpaulin

    - name: Generate test coverage (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      working-directory: src-tauri
      run: cargo tarpaulin --out Xml --output-dir ../target/coverage

    - name: Upload coverage to Codecov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./target/coverage/cobertura.xml
        flags: rust-backend
        name: rust-backend-coverage

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      working-directory: src-tauri
      run: cargo audit

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [test, security-audit]
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src-tauri/target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Build release
      working-directory: src-tauri
      run: cargo build --release --verbose

    - name: Run tests in release mode
      working-directory: src-tauri
      run: cargo test --release --verbose