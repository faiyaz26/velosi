name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Optional tag name for the release. If empty, workflow will use version from src-tauri/tauri.conf.json"
        required: false
        type: string

jobs:
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - args: "--target aarch64-apple-darwin"
            arch: "silicon"
          - args: "--target x86_64-apple-darwin"
            arch: "intel"
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (macOS)
        run: |
          npm install -g pnpm
          pnpm install

      - name: Ensure `jq` is installed (macOS)
        run: |
          which jq || brew install jq

      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Verify Certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development" || true)
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported: $CERT_ID"

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        with:
          args: ${{ matrix.args }}

      - name: Upload macOS artifacts (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts-${{ matrix.arch }}
          path: |
            src-tauri/target/*/release/bundle/dmg/

      # - name: Notarize and staple macOS DMGs
      #   if: always()
      #   run: |
      #     set -euo pipefail
      #     mkdir -p notarize
      #     find src-tauri/target -type f -name "*.dmg" -print0 | while IFS= read -r -d '' dmg; do
      #       echo "Processing $dmg"
      #       xcrun notarytool submit "$dmg" \
      #         --apple-id "$APPLE_ID" \
      #         --password "$APPLE_ID_PASSWORD" \
      #         --team-id "$APPLE_TEAM_ID" \
      #         --wait
      #       echo "Stapling $dmg"
      #       xcrun stapler staple "$dmg"
      #       cp "$dmg" notarize/
      #     done
      # - name: Upload notarized DMGs (${{ matrix.arch }})
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: macos-notarized-${{ matrix.arch }}}
      #     path: notarize/

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Windows)
        run: |
          npm install -g pnpm
          pnpm install

      - name: Build for Windows
        run: pnpm tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            src-tauri/target/release/bundle/msi/
            src-tauri/target/release/bundle/nsis/

      - name: Upload raw Windows artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-raw
          path: |
            src-tauri/target/**/*.msi
            src-tauri/target/**/*.exe

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download macOS artifacts (intel)
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts-intel
          path: artifacts/macos/intel

      - name: Download macOS artifacts (silicon)
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts-silicon
          path: artifacts/macos/silicon

      # - name: Download notarized macOS DMGs (intel)
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: macos-notarized-intel
      #     path: artifacts/macos-notarized/intel

      # - name: Download notarized macOS DMGs (silicon)
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: macos-notarized-silicon
      #     path: artifacts/macos-notarized/silicon

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/windows

      - name: Download raw Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-raw
          path: artifacts/windows-raw

      - name: Ensure `jq` is installed
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read version from tauri.conf.json
        id: read_version
        run: |
          VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine tag name
        id: tag_name
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ env.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Create git tag if missing
        env:
          TAG: ${{ steps.tag_name.outputs.tag }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Debug - List downloaded artifacts
        run: |
          echo "=== macOS (intel) artifacts ==="
          find artifacts/macos/intel -type f -name "*" 2>/dev/null || echo "No macOS intel artifacts found"
          echo "=== macOS (silicon) artifacts ==="
          find artifacts/macos/silicon -type f -name "*" 2>/dev/null || echo "No macOS silicon artifacts found"
          # echo "=== macOS notarized (intel) ==="
          # find artifacts/macos-notarized/intel -type f -name "*" 2>/dev/null || echo "No notarized macOS intel artifacts found"
          # echo "=== macOS notarized (silicon) ==="
          # find artifacts/macos-notarized/silicon -type f -name "*" 2>/dev/null || echo "No notarized macOS silicon artifacts found"
          echo "=== Windows artifacts ==="
          find artifacts/windows -type f -name "*" 2>/dev/null || echo "No Windows artifacts found"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag_name.outputs.tag }}
          name: Release ${{ steps.tag_name.outputs.tag }}
          draft: false
          prerelease: false
          files: |
            artifacts/macos/intel/*.dmg
            artifacts/macos/silicon/*.dmg
            artifacts/windows/*.msi
            artifacts/windows/*.exe
            artifacts/windows-raw/*.msi
            artifacts/windows-raw/*.exe
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
